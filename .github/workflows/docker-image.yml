name: CI (frontend/backend split)

on:
  pull_request:
  push:
    branches: [ main ]
permissions:
  contents: write
  pull-requests: write
jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend:  ${{ steps.filter.outputs.backend }}
    steps:
      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure base branch is fetched
        run: |
          git fetch --no-tags --prune origin +refs/heads/*:refs/remotes/origin/*

      - name: Detect changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          base: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || github.event.before || 'origin/main' }}
          ref:  ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'src/**'
              - 'build.gradle*'
              - 'gradle/**'
              - 'settings.gradle*'

  # 2) 프론트 Lint/Test/Build & Docker
  frontend:
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    env:
      IMAGE_REPO: wngud1/front-library
    outputs:
      image_tag: ${{ steps.pick.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install
        working-directory: frontend
        run: npm ci

      - name: Lint & Test
        working-directory: frontend
        run: |
          npm run lint --if-present
          npm test --if-present -- --ci

      - name: Build
        working-directory: frontend
        run: npm run build

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REPO }}
          tags: |
            type=raw,value=${{ env.IMAGE_REPO }}:main-${{ github.sha }} # 💡 이미지 레포지토리 이름도 태그 값에 포함
            type=raw,value=${{ env.IMAGE_REPO }}:${{ github.ref_name }}-${{ github.sha }}
            type=semver,pattern={{version}},enable=true

      - name: Pick primary tag
        id: pick
        run: |
          echo "tag=$(echo '${{ steps.meta.outputs.tags }}' | grep -m 1 '^wngud1')" >> "$GITHUB_OUTPUT"

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push (Docker)
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_REPO }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_REPO }}:buildcache,mode=max

  # 3) 백엔드 Lint/Test/Build & Docker
  backend:
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' }}
    runs-on: ubuntu-latest
    env:
      IMAGE_REPO: wngud1/backend-library
    outputs:
      image_tag: ${{ steps.pick.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Gradle Test & Build (jar)
        run: ./gradlew clean test bootJar --no-daemon

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REPO }}
          tags: |
            type=raw,value=${{ env.IMAGE_REPO }}:main-${{ github.sha }} # 💡 이미지 레포지토리 이름도 태그 값에 포함
            type=raw,value=${{ env.IMAGE_REPO }}:${{ github.ref_name }}-${{ github.sha }}
            type=semver,pattern={{version}},enable=true

      - name: Pick primary tag
        id: pick
        run: |
          echo "tag=$(echo '${{ steps.meta.outputs.tags }}' | grep -m 1 '^wngud1')" >> "$GITHUB_OUTPUT"

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push (Docker)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_REPO }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_REPO }}:buildcache,mode=max

  # 4) 매니페스트 태그 업데이트 (핵심 수정)
  bump-manifest:
    needs: [frontend, backend]
    if: ${{ always() && (needs.frontend.result == 'success' || needs.backend.result == 'success') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install yq
        run: pip install yq -q

      - name: Update Deployment Image 🛠️
        run: |
          # needs.outputs.image_tag 변수에는 이미 전체 경로가 포함되어 있어야 합니다.
          FRONT_FULL_IMAGE_PATH="${{ needs.frontend.outputs.image_tag }}"
          BACK_FULL_IMAGE_PATH="${{ needs.backend.outputs.image_tag }}"
          
          # 프론트엔드 업데이트 로직
          if [ "${{ needs.frontend.result }}" = "success" ]; then
            yq -i -y '
            (select(.kind == "Deployment" and .metadata.name == "library-front")
             .spec.template.spec.containers[]
              | select(.name == "library-front")
                ).image = "'"${FRONT_FULL_IMAGE_PATH}"'"' cd/front.yaml
          fi
          
          # 백엔드 업데이트 로직
          if [ "${{ needs.backend.result }}" = "success" ]; then
            yq -i -y '
            (select(.kind == "Deployment" and .metadata.name == "library-backend")
            .spec.template.spec.containers[] | select(.name == "library-backend")
            ).image = "'"${BACK_FULL_IMAGE_PATH}"'"' cd/backend.yaml
          fi

      - name: Commit & Push
        run: |
          git config user.name "gha-bot"
          git config user.email "[email protected]"
          git add cd/*.yaml
          git commit -m "chore: bump image tag to latest build"
          git push